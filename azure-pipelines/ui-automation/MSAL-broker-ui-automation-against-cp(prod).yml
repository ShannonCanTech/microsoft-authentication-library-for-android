# 'Allow scripts to access the OAuth token' was selected in pipeline.  Add the following YAML to any steps requiring access:
#       env:
#           MY_ACCESS_TOKEN: $(System.AccessToken)
# Variable 'android:serverUrl' was defined in the Variables tab
# Variable 'ENV_VSTS_MVN_ANDROIDADACCOUNTS_USERNAME' was defined in the Variables tab
# Variable 'gcloud_project_id' was defined in the Variables tab
# Variable 'msal_version' was defined in the Variables tab
# Variable 'mvnAccessToken' was defined in the Variables tab
# Variable 'test_repo_branch' was defined in the Variables tab
# Variable 'test_repo_dir' was defined in the Variables tab

name: $(date:yyyyMMdd)$(rev:.r)
resources:
  repositories:
  - repository: self
    type: git
    ref: shahzaibj/pinFixTest
jobs:
- job: Phase_1
  displayName: Phase 1
  cancelTimeoutInMinutes: 1
  pool:
    name: Hosted Windows 2019 with VS2019
  steps:
  - template: ../templates/steps/checkout-credscan-policheck.yml
  - task: CmdLine@1
    displayName: Set MVN Access Token in Environment
    inputs:
      filename: echo
      arguments: '##vso[task.setvariable variable=ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN]$(mvnAccessToken)'
  - task: AzureKeyVault@1
    name: secret
    displayName: 'Azure Key Vault: Download Secret for Automation'
    inputs:
      ConnectedServiceName: 52f0b8f0-fbe7-4c1b-8169-25886eb6bab4
      KeyVaultName: ADALTestInfo
      SecretsFilter: AndroidAutomationRunnerAppSecret
  - task: DownloadPipelineArtifact@2
    displayName: Download Azure Sample APK
    inputs:
      source: specific
      project: a7934fdd-dcde-4492-a406-7fad6ac00e17
      pipeline: 1278
      artifact: AzureSampleExternalRelease
      path: $(System.ArtifactsDirectory)
  - task: DownloadSecureFile@1
    name: firebaseKey
    displayName: Download Firebase Service Account Key File
    inputs:
      secureFile: b4ed35b0-bb20-4830-8a21-2297e3de7fa1
      retryCount: 5
  - task: Gradle@1
    name: Gradle1
    displayName: Assemble MSAL Automation App
    inputs:
      tasks: clean msalautomationapp:assembleDistBrokerCompanyPortalDebug -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PpreferPreInstalledApks -PbrokerSource=PlayStore
      publishJUnitResults: false
      jdkArchitecture: x86
      sqAnalysisBreakBuildIfQualityGateFailed: false
  - task: Gradle@1
    displayName: Assemble MSAL Automation App Instrumented Tests
    inputs:
      tasks: msalautomationapp:assembleDistBrokerCompanyPortalDebugAndroidTest -PlabSecret=$(AndroidAutomationRunnerAppSecret) -PpreferPreInstalledApks -PbrokerSource=PlayStore
      publishJUnitResults: false
      jdkArchitecture: x86
      sqAnalysisBreakBuildIfQualityGateFailed: false
  - task: PowerShell@2
    displayName: Run UI Automation on Firebase
    inputs:
      targetType: inline
      script: >-
        $baseApkPath = "$(Build.SourcesDirectory)\msalautomationapp\build\outputs\apk"

        $appApk = "$baseApkPath\distBrokerCompanyPortal\debug\msalautomationapp-dist-BrokerCompanyPortal-debug.apk"

        $testApk = "$baseApkPath\androidTest\distBrokerCompanyPortal\debug\msalautomationapp-dist-BrokerCompanyPortal-debug-androidTest.apk"

        $azureSampleApk = "$(System.ArtifactsDirectory)\AzureSampleExternalRelease\app-external-release.apk"

        $appApk

        $testApk

        $azureSampleApk

        gcloud firebase test android run --type instrumentation --app $appApk --test $testApk --device model=flame,version=29 --timeout 45m --additional-apks $azureSampleApk --results-dir msal-CP-$(Build.BuildId)-$(Build.BuildNumber) --directories-to-pull "/sdcard" --use-orchestrator --test-targets "package com.microsoft.identity.client.msal.automationapp.testpass.broker"
  - task: PowerShell@2
    displayName: Download Test Result File
    condition: succeededOrFailed()
    inputs:
      targetType: inline
      script: gsutil cp gs://test-lab-ffz6x9pu2y62a-is0rq7a7rwdhi/msal-CP-$(Build.BuildId)-$(Build.BuildNumber)/flame-29-en-portrait/test_result_1.xml $(Build.SourcesDirectory)
  - task: PublishTestResults@2
    displayName: Publish Test Results to ADO
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '*test_result*.xml'
      searchFolder: $(Build.SourcesDirectory)
      testRunTitle: 'MSAL UI Automation - Build # $(Build.BuildNumber)'
  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Detection
...
