# File: include-base.yml

parameters:
- name: policheck.inputType
- name: policheck.cmdLineArgs

steps:
- checkout: self
  clean: true
  submodules: recursive
  persistCredentials: True
- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  displayName: Run CredScan
  inputs:
    toolMajorVersion: V2
    debugMode: false
    folderSuppression: false
- task: PoliCheck@1
  name: PoliCheck_2
  displayName: Run PoliCheck
  inputs:
    inputType: $(parameters.policheck.inputType)
    cmdLineArgs: $(parameters.policheck.cmdLineArgs)
    importEx: 0
    optionsFC: 1
    optionsXS: 1
    optionsSEV: 1|2
    optionsPE: 1|2|3|4
- task: PublishSecurityAnalysisLogs@2
  name: PublishSecurityAnalysisLogs15
  displayName: Publish Security Analysis Logs
- task: CmdLine@1
  displayName: Set MVN Access Token in Environment
  inputs:
    filename: echo
    arguments: '##vso[task.setvariable variable=ENV_VSTS_MVN_ANDROIDADACCOUNTS_ACCESSTOKEN]$(mvnAccessToken)'
- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: Download Cert for Automation'
  inputs:
      ConnectedServiceName: 9a9308ae-59b4-475f-b49c-3e828c508d8b
      KeyVaultName: ADALTestInfo
      SecretsFilter: AndroidAutomationRunner
- task: PowerShell@2
  displayName: Install Automation Cert
  inputs:
    targetType: inline
    script: >
      $kvSecretBytes = [System.Convert]::FromBase64String('$(AndroidAutomationRunner)')

      $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection

      $certCollection.Import($kvSecretBytes, $null, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)


      $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12)

      $pfxPath = '$(Build.SourcesDirectory)' + "\TestCert.pfx"

      [System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)


      Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My
